<!-- livebook:{"persist_outputs":true} -->

# Day 5: Doesn't He Have Intern-Elves For This?

```elixir
Mix.install([])
File.cd!(Path.dirname(__ENV__.file))
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Part 1

* [Link: Advent of Code](https://adventofcode.com/2015/)
* [Link: Paste to Markdown](https://euangoddard.github.io/clipboard2markdown/)

<!-- livebook:{"break_markdown":true} -->

Santa needs help figuring out which strings in his text file are naughty or nice.

A nice string is one with all of the following properties:

* It contains at least three vowels (`aeiou` only), like `aei`, `xazegov`, or `aeiouaeiouaeiou`.
* It contains at least one letter that appears twice in a row, like `xx`, `abcdde` (`dd`), or `aabbccdd` (`aa`, `bb`, `cc`, or `dd`).
* It does not contain the strings `ab`, `cd`, `pq`, or `xy`, even if they are part of one of the other requirements.

For example:

* `ugknbfddgicrmopn` is nice because it has at least three vowels (`u...i...o...`), a double letter (`...dd...`), and none of the disallowed substrings.
* `aaa` is nice because it has at least three vowels and a double letter, even though the letters used by different rules overlap.
* `jchzalrnumimnmhp` is naughty because it has no double letter.
* `haegwjzuvuyypxyu` is naughty because it contains the string `xy`.
* `dvszwmarrgswjxmb` is naughty because it contains only one vowel.

How many strings are nice?

```elixir
defmodule Validator do
  def is_nice?(input) do
    with true <- has_three_vowels?(input),
         true <- has_two_letters_in_row?(input),
         true <- has_no_forbidden_strings?(input) do
      true
    else
      _ -> false
    end
  end

  def has_three_vowels?(input),
    do:
      input
      |> String.graphemes()
      |> Enum.map(fn letter -> Enum.member?(["a", "e", "i", "o", "u"], letter) end)
      |> Enum.filter(fn v -> v === true end)
      |> then(fn r -> Enum.count(r) >= 3 end)

  def has_two_letters_in_row?(input) do
    input
    |> String.graphemes()
    |> Enum.reduce_while([], fn
      _, acc when length(acc) >= 2 -> {:halt, acc}
      l, acc -> if Enum.member?(acc, l), do: {:cont, [l | acc]}, else: {:cont, [l]}
    end)
    |> Enum.count()
    |> then(fn length -> length >= 2 end)
  end

  def has_no_forbidden_strings?(input),
    do:
      Enum.all?(["ab", "cd", "pq", "xy"], fn forbidden -> !String.contains?(input, forbidden) end)
end
```

<!-- livebook:{"output":true} -->

```
{:module, Validator, <<70, 79, 82, 49, 0, 0, 15, ...>>, {:has_no_forbidden_strings?, 1}}
```

```elixir
# describe `has_three_vowels?/1`
true = Validator.has_three_vowels?("ugknbfddgicrmopn")
true = Validator.has_three_vowels?("aaa")
true = Validator.has_three_vowels?("jchzalrnumimnmhp")
true = Validator.has_three_vowels?("haegwjzuvuyypxyu")
false = Validator.has_three_vowels?("dvszwmarrgswjxmb")
```

<!-- livebook:{"output":true} -->

```
false
```

```elixir
# describe `has_three_vowels?/1`
true = Validator.has_two_letters_in_row?("ugknbfddgicrmopn")
true = Validator.has_two_letters_in_row?("aaa")
false = Validator.has_two_letters_in_row?("jchzalrnumimnmhp")
true = Validator.has_two_letters_in_row?("haegwjzuvuyypxyu")
true = Validator.has_two_letters_in_row?("dvszwmarrgswjxmb")
```

<!-- livebook:{"output":true} -->

```
true
```

```elixir
# describe `has_no_forbidden_strings?/1`
true = Validator.has_no_forbidden_strings?("ugknbfddgicrmopn")
true = Validator.has_no_forbidden_strings?("aaa")
true = Validator.has_no_forbidden_strings?("jchzalrnumimnmhp")
false = Validator.has_no_forbidden_strings?("haegwjzuvuyypxyu")
true = Validator.has_no_forbidden_strings?("dvszwmarrgswjxmb")
```

<!-- livebook:{"output":true} -->

```
true
```

```elixir
File.read!('day-05-input.txt')
|> String.split()
|> Enum.filter(&Validator.is_nice?/1)
|> Enum.count()
```

<!-- livebook:{"output":true} -->

```
238
```

## Part 2

Realizing the error of his ways, Santa has switched to a better model of determining whether a string is naughty or nice. None of the old rules apply, as they are all clearly ridiculous.

Now, a nice string is one with all of the following properties:

* It contains a pair of any two letters that appears at least twice in the string without overlapping, like `xyxy` (`xy`) or `aabcdefgaa` (`aa`), but not like `aaa` (`aa`, but it overlaps).
* It contains at least one letter which repeats with exactly one letter between them, like `xyx`, `abcdefeghi` (`efe`), or even `aaa`.

For example:

* `qjhvhtzxzqqjkmpb` is nice because is has a pair that appears twice (`qj`) and a letter that repeats with exactly one letter between them (`zxz`).
* `xxyxx` is nice because it has a pair that appears twice and a letter that repeats with one between, even though the letters used by each rule overlap.
* `uurcxstgmygtbstg` is naughty because it has a pair (`tg`) but no repeat with a single letter between them.
* `ieodomkazucvgmuy` is naughty because it has a repeating letter with one between (`odo`), but no pair that appears twice.

How many strings are nice under these new rules?

```elixir
defmodule Validator do
  def is_nice?(input), do: Enum.all?([has_sandwich?(input), has_two_pairs?(input)])
  def has_sandwich?(input), do: String.match?(input, ~r/(.).\1/)
  def has_two_pairs?(input), do: String.match?(input, ~r/(..).*\1/)
end
```

<!-- livebook:{"output":true} -->

```
{:module, Validator, <<70, 79, 82, 49, 0, 0, 9, ...>>, {:has_two_pairs?, 1}}
```

```elixir
# describe `has_sandwich?/1`
true = Validator.has_sandwich?("qjhvhtzxzqqjkmpb")
true = Validator.has_sandwich?("xxyxx")
false = Validator.has_sandwich?("uurcxstgmygtbstg")
true = Validator.has_sandwich?("ieodomkazucvgmuy")
```

<!-- livebook:{"output":true} -->

```
true
```

```elixir
# describe `has_two_pairs?/1`
true = Validator.has_two_pairs?("qjhvhtzxzqqjkmpb")
true = Validator.has_two_pairs?("xxyxx")
true = Validator.has_two_pairs?("uurcxstgmygtbstg")
false = Validator.has_two_pairs?("ieodomkazucvgmuy")
```

<!-- livebook:{"output":true} -->

```
false
```

```elixir
File.read!('day-05-input.txt')
|> String.split()
|> Enum.filter(&Validator.is_nice?/1)
|> Enum.count()
```

<!-- livebook:{"output":true} -->

```
69
```
